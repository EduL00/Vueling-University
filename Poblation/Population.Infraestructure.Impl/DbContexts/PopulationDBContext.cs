// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Population.Infraestructure.Contracts.Entities;

namespace Population.Infraestructure.Impl.DbContexts
{
    public partial class PopulationDBContext : DbContext
    {
        public PopulationDBContext()
        {
        }

        public PopulationDBContext(DbContextOptions<PopulationDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CountryEntity> Countries { get; set; }
        public virtual DbSet<CountryInfoEntity> CountryInfos { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=AKTPO110\\SQLEXPRESS;Initial Catalog=PopulationDB;User ID=eduard;Password=lorda");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CountryEntity>(entity =>
            {
                entity.ToTable("Country");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CountryInfoEntity>(entity =>
            {
                entity.ToTable("CountryInfo");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.CountryInfos)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_CountryInfo_CountryInfo");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}