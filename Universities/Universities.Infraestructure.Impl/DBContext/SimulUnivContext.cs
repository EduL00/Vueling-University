// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Universities.Infraestructure.Contracts.DBEntities;

namespace Universities.Infraestructure.Impl.DBContext
{
    public partial class SimulUnivContext : DbContext
    {
        public SimulUnivContext()
        {
        }

        public SimulUnivContext(DbContextOptions<SimulUnivContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DBDomainEntity> Domains { get; set; }
        public virtual DbSet<DBUniversityEntity> Universities { get; set; }
        public virtual DbSet<DBWebEntity> Webs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=AKTPO110\\SQLEXPRESS;Initial Catalog=SimulUniv;User ID=eduard;Password=lorda");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DBDomainEntity>(entity =>
            {
                entity.ToTable("Domain");

                entity.Property(e => e.Domain1)
                    .HasMaxLength(50)
                    .HasColumnName("Domain");

                entity.HasOne(d => d.UniversitiPropertyNavigation)
                    .WithMany(p => p.Domains)
                    .HasForeignKey(d => d.UniversitiProperty)
                    .HasConstraintName("FK_Domain_University");
            });

            modelBuilder.Entity<DBUniversityEntity>(entity =>
            {
                entity.ToTable("University");

                entity.Property(e => e.Alpha)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Province).HasMaxLength(50);
            });

            modelBuilder.Entity<DBWebEntity>(entity =>
            {
                entity.ToTable("Web");

                entity.Property(e => e.Web1)
                    .HasMaxLength(50)
                    .HasColumnName("Web");

                entity.HasOne(d => d.UniversityPropertyNavigation)
                    .WithMany(p => p.Webs)
                    .HasForeignKey(d => d.UniversityProperty)
                    .HasConstraintName("FK_Web_Web");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}